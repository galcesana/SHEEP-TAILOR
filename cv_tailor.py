# -*- coding: utf-8 -*-
"""cv_tailor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19RsWEaz0tR2DDg8LUA8WweWAQKbwDI3S

# CV Tailor

*installations*
"""

import mimetypes # used to check the resume file type
import google.generativeai as genai
import fitz  # handle pdf
import docx  # handle docx
import os  # used to get the file extension
import subprocess

# activating GEMINI #

key = 'AIzaSyBB093d-_sTNO-eaIRvBlzK8RTSOae6-mk'  # the gemini api key
genai.configure(api_key=key) # configure the Google Generative AI library.

"""*drive access*"""

# from google.colab import drive
# drive.mount('/content/drive')

"""*functions*

*tailoring the resume using gemini*
"""

# Function to load resume from a Word file
def load_docx_resume(file_path):
    doc = docx.Document(file_path)
    resume_text = "\n".join([para.text for para in doc.paragraphs])
    return resume_text

# Function to load resume from a pdf file
def load_pdf_resume(file_path):
    text = ""
    # Open the PDF file
    with fitz.open(file_path) as pdf_document:
        for page_num in range(pdf_document.page_count):
            # Extract text from each page
            page = pdf_document[page_num]
            text += page.get_text()
    return text

# Function to save tailored resume to a tex file
def save_tailored_resume(tailored_text, output_path):
    with open(output_path, 'w') as f:
      f.write(tailored_text)

# Function to tailor resume using gemini API
def tailor_resume_with_gemini(resume_text, job_description):
    # Construct the prompt for the gemini API

    prompt = f"""
    Here is a job description:
    {job_description}

    Here is the current resume:
    {resume_text}

    Based on the job description, please modify the resume to best suit the role by enhancing relevant skills, experiences, and phrasing.

    In your response, provide only the modified resume content in LaTeX code format, ready to be compiled as a PDF CV,
    with no additional comments or explanatory text. The output should appear as if it is the final version intended directly for submission.
    try to make it fit 1 page.
    write it in a way xelatex can compile it and only use Roboto font.
    write your response only in English.
    Important - make sure xelatex can compile it! if your text contains other languages than English only 
    print the number 69 and nothing else."""

    # and only use Computer Modern Roman font.  do not include Arial, Times New Roman or Helvetica Neue fonts

    # not Roboto Mono

    # using gemini

    model = genai.GenerativeModel('gemini-1.5-flash')
    # model = genai.GenerativeModel('gemini-1.0-mini')
    response = model.generate_content(prompt)
    print("\n####### Response successfully generated #######\n")
    # Extract the suggestions from the response
    suggestions = response.text.strip()
    print("########################## GEMINI RESPONSE ##########################\n\n")
    print(suggestions)
    print("\n\n########################## GEMINI RESPONSE ##########################\n\n")
    if suggestions == "69":
        raise RuntimeError("Got different language")
    return suggestions


def get_file_extension(file_path):
    # Split the file path and get the extension without the dot
    return os.path.splitext(file_path)[1][1:]

# Function to compile the LaTeX file using xelatex
def compile_latex_file(output_path):
    # Get the directory of the .tex file to set as the working directory
    working_directory = os.path.dirname(output_path)

    try:
        # Run the xelatex command
        subprocess.run(
            ['xelatex', output_path],
            check=True
        )
        print("PDF compiled successfully.")
    except subprocess.CalledProcessError as e:
        print(f"An error occurred while compiling the PDF: {e}")
        raise RuntimeError("An error occurred during the LaTeX compilation.")
    except FileNotFoundError:
        print("Error: 'xelatex' was not found. Ensure it is installed and in your PATH.")
        raise RuntimeError("The 'xelatex' command was not found. Please check your installation.")

# Main function to tailor resume based on job description
def tailor_resume(file_path, job_description, output_path="Tailored_Resume.tex"):
    if job_description == "":
        raise RuntimeError("Empty description.")
    input_extension = get_file_extension(file_path)
    if input_extension == 'docx':
        resume_text = load_docx_resume(file_path)
    elif input_extension == 'pdf':
        resume_text = load_pdf_resume(file_path)
    else:
        print("Unsupported file type. Only .docx files are supported.")
        return
    print("\n####### Resume successfully loaded #######\n")
    print(resume_text)
    print("\n####### Resume successfully loaded #######\n")
    # resume_text = load_docx_resume(file_path)
    suggestions = tailor_resume_with_gemini(resume_text, job_description)

    # Combine the original resume with the GPT suggestions
    tailored_resume = suggestions

    # Save the tailored resume
    save_tailored_resume(tailored_resume, output_path)

    compile_latex_file(output_path)

    print(f"Tailored resume saved to {output_path}")



"""*Define the job description and the path to the resume file*"""

job_description = """
Israel, Hod HaSharon
Hourly
DESCRIPTION
About ThetaRay:
ThetaRay is a trailblazer in AI-powered Anti-Money Laundering (AML) solutions, offering cutting-edge technology to fintechs, banks, and regulatory bodies worldwide. Our mission is to enhance trust in financial transactions, ensuring compliant and innovative business growth.
Thetaray is a culture-driven company. Our values are at the heart of our success. By joining us, you'll have the opportunity to embody these values and inspire others through your actions.
Our technology empowers customers to expand into new markets and introduce groundbreaking products.
Why Join ThetaRay?
At ThetaRay, you'll be part of a dynamic global team committed to redefining the financial services sector through technological innovation. You will contribute to creating safer financial environments and have the opportunity to work with some of the brightest minds in AI, ML, and financial technology. We offer a collaborative, inclusive, and forward-thinking work environment where your ideas and contributions are valued and encouraged.
Join us in our mission to revolutionize the financial world, making it safer and more trustworthy for millions worldwide. Explore exciting career opportunities at ThetaRay â€“ where innovation meets purpose.
We are looking for a RevOps Analyst student, for a part-time position to join our team. As a RevOps Analyst, you will be responsible for conducting comprehensive market research and analysis to identify potential leads and business opportunities. Your primary objective will be to gather accurate and up-to-date information on potential customers and business prospects while maintaining the precision and reliability of our lead data.
Responsibilities:
Conduct in-depth market research to identify potential customers, and market trends based on business models, use cases, and demographic characteristics.
Utilize various research methodologies and tools to collect and analyze data.
Develop and uphold an extensive lead database, guaranteeing the precision and reliability of data within all CRM systems.
Present research findings and reports to stakeholders in a clear and concise manner.
Developing & maintaining a deep understanding of our target audiences, their needs, goals, passions, and expectations and disseminating this knowledge throughout the business.
Deliver analysis on post-target leads analysis including reports dashboard to management and peer groups as requested.
REQUIREMENTS


Bachelor's in business, economics, or other equivalent degree.
Availability for at least a 50% position
Experience working with CRM tools- a big advantage
Strong analytical skills and proficient project management abilities.
Ability to work independently and manage multiple projects simultaneously.
Highly organized with great attention to detail and a data-oriented mindset.
Excellent written and verbal communication skills in English.
Proficiency in Excel and PowerPoint.
"""
